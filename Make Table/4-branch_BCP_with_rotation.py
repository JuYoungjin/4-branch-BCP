import numpy as np

# left circular rotation function
def rot_left(x, num, bit):
    mask = pow(2, bit) - 1
    return ((x << num) | (x >> (bit - num))) & mask

# Calculate the 4-branch BCP by counting all cases
def count_all_value_4branch(del0, del1, del2, del3, nav0, nav1, nav2, nav3, alpha, beta, bit=2):
    cnt = 0
    num = pow(2, bit)

    for x0 in range(num):
        for x1 in range(num):
            for x2 in range(num):
                for x3 in range(num):
                    for key0 in range(num):
                        for key1 in range(num):
                            for key2 in range(num):
                                x0_ = x0 ^ del0
                                x1_ = x1 ^ del1
                                x2_ = x2 ^ del2
                                x3_ = x3 ^ del3

                                p0 = (x0 + (rot_left(x1, alpha, bit) ^ key0)) % num
                                p1 = (x1 + (rot_left(x2, beta, bit) ^ key1)) % num
                                p2 = (x2 + (x3 ^ key2)) % num
                                p3 = x3

                                p0_ = (x0_ + (rot_left(x1_, alpha, bit) ^ key0)) % num
                                p1_ = (x1_ + (rot_left(x2_, beta, bit) ^ key1)) % num
                                p2_ = (x2_ + (x3_ ^ key2)) % num
                                p3_ = x3_

                                pp0 = p0 ^ nav0
                                pp1 = p1 ^ nav1
                                pp2 = p2 ^ nav2
                                pp3 = p3 ^ nav3

                                pp0_ = p0_ ^ nav0
                                pp1_ = p1_ ^ nav1
                                pp2_ = p2_ ^ nav2
                                pp3_ = p3_ ^ nav3

                                xx3 = pp3
                                xx2 = (pp2 - (xx3 ^ key2)) % num
                                xx1 = (pp1 - (rot_left(xx2, beta, bit) ^ key1)) % num
                                xx0 = (pp0 - (rot_left(xx1, alpha, bit) ^ key0)) % num

                                xx3_ = pp3_
                                xx2_ = (pp2_ - (xx3_ ^ key2)) % num
                                xx1_ = (pp1_ - (rot_left(xx2_, beta, bit) ^ key1)) % num
                                xx0_ = (pp0_ - (rot_left(xx1_, alpha, bit) ^ key0)) % num

                                if xx3_ ^ xx3 == del3:
                                    if xx2_ ^ xx2 == del2:
                                        if xx1_ ^ xx1 == del1:
                                            if xx0_ ^ xx0 == del0:
                                                cnt += 1

    sol = cnt / (num * num * num * num * num * num * num)
    return sol

# Make the 4-branch BCP Table
def four_bcp_matrix_gen(del0, del1, del2, del3, nav0, nav1, nav2, nav3, cut=1):
    m = np.array(np.zeros((4096, 4096)))
    for carry in range(4096):
        c0 = (carry & 2048) >> 11
        c0_ = (carry & 1024) >> 10
        b0 = (carry & 512) >> 9
        b0_ = (carry & 256) >> 8

        c1 = (carry & 128) >> 7
        c1_ = (carry & 64) >> 6
        b1 = (carry & 32) >> 5
        b1_ = (carry & 16) >> 4

        c2 = (carry & 8) >> 3
        c2_ = (carry & 4) >> 2
        b2 = (carry & 2) >> 1
        b2_ = (carry & 1)

        if c0 ^ c0_ ^ b0 ^ b0_ != 0:
            continue
        if c1 ^ c1_ ^ b1 ^ b1_ != 0:
            continue
        if c2 ^ c2_ ^ b2 ^ b2_ != 0:
            continue

        for x0 in range(2):
            for x1 in range(2):
                for x2 in range(2):
                    for x3 in range(2):
                        for k0 in range(2):
                            for k1 in range(2):
                                for k2 in range(2):
                                    c0_next = 0
                                    c0_next_ = 0
                                    b0_next = 0
                                    b0_next_ = 0

                                    c1_next = 0
                                    c1_next_ = 0
                                    b1_next = 0
                                    b1_next_ = 0

                                    c2_next = 0
                                    c2_next_ = 0
                                    b2_next = 0
                                    b2_next_ = 0

                                    # x2 is rot1(rot2(x2)) actually
                                    # others are similar
                                    if x2 + (x3 ^ k2) + c2 >= 2:
                                        c2_next = 1
                                    if (x2 ^ del2) + (x3 ^ del3 ^ k2) + c2_ >= 2:
                                        c2_next_ = 1
                                    if ((x2 ^ (x3 ^ k2) ^ c2) ^ nav2) - (x3 ^ nav3 ^ k2) - b2 <= -1:
                                        b2_next = 1
                                    if ((x2 ^ del2) ^ (x3 ^ del3 ^ k2) ^ c2_ ^ nav2) - (
                                            x3 ^ del3 ^ nav3 ^ k2) - b2_ <= -1:
                                        b2_next_ = 1

                                    # x1 is rot1(x1) actually
                                    # others are similar
                                    if x1 + (x2 ^ k1) + c1 >= 2:
                                        c1_next = 1
                                    if (x1 ^ del1) + (x2 ^ del2 ^ k1) + c1_ >= 2:
                                        c1_next_ = 1
                                    if (x1 ^ x2 ^ k1 ^ c1 ^ nav1) - (x2 ^ c2 ^ b2 ^ nav2 ^ nav3 ^ k1) - b1 <= -1:
                                        b1_next = 1
                                    if (x1 ^ del1 ^ x2 ^ del2 ^ k1 ^ c1_ ^ nav1) - (
                                            x2 ^ c2_ ^ b2_ ^ del2 ^ nav2 ^ nav3 ^ k1) - b1_ <= -1:
                                        b1_next_ = 1

                                    # This part is not rotated
                                    if x0 + (x1 ^ k0) + c0 >= 2:
                                        c0_next = 1
                                    if (x0 ^ del0) + (x1 ^ del1 ^ k0) + c0_ >= 2:
                                        c0_next_ = 1
                                    if (x0 ^ x1 ^ k0 ^ c0 ^ nav0) - (
                                            x1 ^ c1 ^ c2 ^ b1 ^ b2 ^ nav1 ^ nav2 ^ nav3 ^ k0) - b0 <= -1:
                                        b0_next = 1
                                    if (x0 ^ del0 ^ x1 ^ del1 ^ k0 ^ c0_ ^ nav0) - (
                                            x1 ^ c1_ ^ c2_ ^ b1_ ^ b2_ ^ del1 ^ nav1 ^ nav2 ^ nav3 ^ k0) - b0_ <= -1:
                                        b0_next_ = 1

                                    next_carry = (c0_next << 11) | (c0_next_ << 10) | (b0_next << 9) | (b0_next_ << 8) | (
                                            c1_next << 7) | (c1_next_ << 6) | (b1_next << 5) | (b1_next_ << 4) | (
                                            c2_next << 3) | (c2_next_ << 2) | (b2_next << 1) | (b2_next_ << 0)

                                    m[next_carry][carry] += 1

    if cut == 1:
        append_list = [0, 3, 5, 6, 9, 10, 12, 15, 48, 51, 53, 54, 57, 58, 60, 63, 80, 83, 85, 86, 89, 90, 92, 95, 96, 99,
                       101, 102, 105, 106, 108, 111, 144, 147, 149, 150, 153, 154, 156, 159, 160, 163, 165, 166, 169, 170,
                       172, 175, 192, 195, 197, 198, 201, 202, 204, 207, 240, 243, 245, 246, 249, 250, 252, 255, 768, 771,
                       773, 774, 777, 778, 780, 783, 816, 819, 821, 822, 825, 826, 828, 831, 848, 851, 853, 854, 857, 858,
                       860, 863, 864, 867, 869, 870, 873, 874, 876, 879, 912, 915, 917, 918, 921, 922, 924, 927, 928, 931,
                       933, 934, 937, 938, 940, 943, 960, 963, 965, 966, 969, 970, 972, 975, 1008, 1011, 1013, 1014, 1017,
                       1018, 1020, 1023, 1280, 1283, 1285, 1286, 1289, 1290, 1292, 1295, 1328, 1331, 1333, 1334, 1337, 1338,
                       1340, 1343, 1360, 1363, 1365, 1366, 1369, 1370, 1372, 1375, 1376, 1379, 1381, 1382, 1385, 1386, 1388,
                       1391, 1424, 1427, 1429, 1430, 1433, 1434, 1436, 1439, 1440, 1443, 1445, 1446, 1449, 1450, 1452, 1455,
                       1472, 1475, 1477, 1478, 1481, 1482, 1484, 1487, 1520, 1523, 1525, 1526, 1529, 1530, 1532, 1535, 1536,
                       1539, 1541, 1542, 1545, 1546, 1548, 1551, 1584, 1587, 1589, 1590, 1593, 1594, 1596, 1599, 1616, 1619,
                       1621, 1622, 1625, 1626, 1628, 1631, 1632, 1635, 1637, 1638, 1641, 1642, 1644, 1647, 1680, 1683, 1685,
                       1686, 1689, 1690, 1692, 1695, 1696, 1699, 1701, 1702, 1705, 1706, 1708, 1711, 1728, 1731, 1733, 1734,
                       1737, 1738, 1740, 1743, 1776, 1779, 1781, 1782, 1785, 1786, 1788, 1791, 2304, 2307, 2309, 2310, 2313,
                       2314, 2316, 2319, 2352, 2355, 2357, 2358, 2361, 2362, 2364, 2367, 2384, 2387, 2389, 2390, 2393, 2394,
                       2396, 2399, 2400, 2403, 2405, 2406, 2409, 2410, 2412, 2415, 2448, 2451, 2453, 2454, 2457, 2458, 2460,
                       2463, 2464, 2467, 2469, 2470, 2473, 2474, 2476, 2479, 2496, 2499, 2501, 2502, 2505, 2506, 2508, 2511,
                       2544, 2547, 2549, 2550, 2553, 2554, 2556, 2559, 2560, 2563, 2565, 2566, 2569, 2570, 2572, 2575, 2608,
                       2611, 2613, 2614, 2617, 2618, 2620, 2623, 2640, 2643, 2645, 2646, 2649, 2650, 2652, 2655, 2656, 2659,
                       2661, 2662, 2665, 2666, 2668, 2671, 2704, 2707, 2709, 2710, 2713, 2714, 2716, 2719, 2720, 2723, 2725,
                       2726, 2729, 2730, 2732, 2735, 2752, 2755, 2757, 2758, 2761, 2762, 2764, 2767, 2800, 2803, 2805, 2806,
                       2809, 2810, 2812, 2815, 3072, 3075, 3077, 3078, 3081, 3082, 3084, 3087, 3120, 3123, 3125, 3126, 3129,
                       3130, 3132, 3135, 3152, 3155, 3157, 3158, 3161, 3162, 3164, 3167, 3168, 3171, 3173, 3174, 3177, 3178,
                       3180, 3183, 3216, 3219, 3221, 3222, 3225, 3226, 3228, 3231, 3232, 3235, 3237, 3238, 3241, 3242, 3244,
                       3247, 3264, 3267, 3269, 3270, 3273, 3274, 3276, 3279, 3312, 3315, 3317, 3318, 3321, 3322, 3324, 3327,
                       3840, 3843, 3845, 3846, 3849, 3850, 3852, 3855, 3888, 3891, 3893, 3894, 3897, 3898, 3900, 3903, 3920,
                       3923, 3925, 3926, 3929, 3930, 3932, 3935, 3936, 3939, 3941, 3942, 3945, 3946, 3948, 3951, 3984, 3987,
                       3989, 3990, 3993, 3994, 3996, 3999, 4000, 4003, 4005, 4006, 4009, 4010, 4012, 4015, 4032, 4035, 4037,
                       4038, 4041, 4042, 4044, 4047, 4080, 4083, 4085, 4086, 4089, 4090, 4092, 4095]
        m = m[append_list, :]
        m = m[:, append_list]
    m = m
    return m

"""
In this case, 4-branch BCP table can be compressed by the methods in Kim et al. BCP paper
"""
def four_bcp_matrix_save():
    B = []
    for i in range(256):
        del0 = (i & 128) >> 7
        del1 = (i & 64) >> 6
        del2 = (i & 32) >> 5
        del3 = (i & 16) >> 4

        nav0 = (i & 8) >> 3
        nav1 = (i & 4) >> 2
        nav2 = (i & 2) >> 1
        nav3 = (i & 1) >> 0

        m = four_bcp_matrix_gen(del0, del1, del2, del3, nav0, nav1, nav2, nav3)
        m = m
        B.append(m)
    B = np.array(B)
    np.save('four_bcp_matrix_rotation.npy', B)
    return B

def four_bcp_last_matrix_save():
    for i in range(256):
        del0 = (i & 128) >> 7
        del1 = (i & 64) >> 6
        del2 = (i & 32) >> 5
        del3 = (i & 16) >> 4

        nav0 = (i & 8) >> 3
        nav1 = (i & 4) >> 2
        nav2 = (i & 2) >> 1
        nav3 = (i & 1) >> 0

        m = four_bcp_matrix_gen(del0, del1, del2, del3, nav0, nav1, nav2, nav3, cut=2)
        m = m
        np.save('four_bcp_last_matrix' + str(i) + '.npy', m)

def make_rotation_matrix():
    R = []
    a = np.zeros((4096, 4096))
    b = np.zeros((4096, 4096))
    for carry in range(4096):
        c0 = (carry & 2048) >> 11
        c0_ = (carry & 1024) >> 10
        b0 = (carry & 512) >> 9
        b0_ = (carry & 256) >> 8

        c1 = (carry & 128) >> 7
        c1_ = (carry & 64) >> 6
        b1 = (carry & 32) >> 5
        b1_ = (carry & 16) >> 4

        c2 = (carry & 8) >> 3
        c2_ = (carry & 4) >> 2
        b2 = (carry & 2) >> 1
        b2_ = (carry & 1)
        for next_carry in range(4096):
            next_c0 = (next_carry & 2048) >> 11
            next_c0_ = (next_carry & 1024) >> 10
            next_b0 = (next_carry & 512) >> 9
            next_b0_ = (next_carry & 256) >> 8

            next_c1 = (next_carry & 128) >> 7
            next_c1_ = (next_carry & 64) >> 6
            next_b1 = (next_carry & 32) >> 5
            next_b1_ = (next_carry & 16) >> 4

            next_c2 = (next_carry & 8) >> 3
            next_c2_ = (next_carry & 4) >> 2
            next_b2 = (next_carry & 2) >> 1
            next_b2_ = (next_carry & 1)


            if c0 == next_c0 and c0_ == next_c0_ and c2 == next_c2 and c2_ == next_c2_ \
                    and b0 == next_b0 and b0_ == next_b0_ and b2 == next_b2 and b2_ == next_b2_:
                if next_c1 == 0 and next_c1_ == 0 and next_b1 == 0 and next_b1_ == 0:
                    a[next_carry][carry] = 1

            if c0 == next_c0 and c0_ == next_c0_ and c1 == next_c1 and c1_ == next_c1_ \
                    and b0 == next_b0 and b0_ == next_b0_ and b1 == next_b1 and b1_ == next_b1_:
                if next_c2 == 0 and next_c2_ == 0 and next_b2 == 0 and next_b2_ == 0:
                    b[next_carry][carry] = 1

    R.append(a)
    R.append(b)
    R = np.array(R)
    np.save('rotation_matrix.npy', R)
    return R

def make_C_L_matrix():
    L = []
    C = []
    append_list = [0, 3, 5, 6, 9, 10, 12, 15, 48, 51, 53, 54, 57, 58, 60, 63, 80, 83, 85, 86, 89, 90, 92, 95, 96, 99,
                   101, 102, 105, 106, 108, 111, 144, 147, 149, 150, 153, 154, 156, 159, 160, 163, 165, 166, 169, 170,
                   172, 175, 192, 195, 197, 198, 201, 202, 204, 207, 240, 243, 245, 246, 249, 250, 252, 255, 768, 771,
                   773, 774, 777, 778, 780, 783, 816, 819, 821, 822, 825, 826, 828, 831, 848, 851, 853, 854, 857, 858,
                   860, 863, 864, 867, 869, 870, 873, 874, 876, 879, 912, 915, 917, 918, 921, 922, 924, 927, 928, 931,
                   933, 934, 937, 938, 940, 943, 960, 963, 965, 966, 969, 970, 972, 975, 1008, 1011, 1013, 1014, 1017,
                   1018, 1020, 1023, 1280, 1283, 1285, 1286, 1289, 1290, 1292, 1295, 1328, 1331, 1333, 1334, 1337, 1338,
                   1340, 1343, 1360, 1363, 1365, 1366, 1369, 1370, 1372, 1375, 1376, 1379, 1381, 1382, 1385, 1386, 1388,
                   1391, 1424, 1427, 1429, 1430, 1433, 1434, 1436, 1439, 1440, 1443, 1445, 1446, 1449, 1450, 1452, 1455,
                   1472, 1475, 1477, 1478, 1481, 1482, 1484, 1487, 1520, 1523, 1525, 1526, 1529, 1530, 1532, 1535, 1536,
                   1539, 1541, 1542, 1545, 1546, 1548, 1551, 1584, 1587, 1589, 1590, 1593, 1594, 1596, 1599, 1616, 1619,
                   1621, 1622, 1625, 1626, 1628, 1631, 1632, 1635, 1637, 1638, 1641, 1642, 1644, 1647, 1680, 1683, 1685,
                   1686, 1689, 1690, 1692, 1695, 1696, 1699, 1701, 1702, 1705, 1706, 1708, 1711, 1728, 1731, 1733, 1734,
                   1737, 1738, 1740, 1743, 1776, 1779, 1781, 1782, 1785, 1786, 1788, 1791, 2304, 2307, 2309, 2310, 2313,
                   2314, 2316, 2319, 2352, 2355, 2357, 2358, 2361, 2362, 2364, 2367, 2384, 2387, 2389, 2390, 2393, 2394,
                   2396, 2399, 2400, 2403, 2405, 2406, 2409, 2410, 2412, 2415, 2448, 2451, 2453, 2454, 2457, 2458, 2460,
                   2463, 2464, 2467, 2469, 2470, 2473, 2474, 2476, 2479, 2496, 2499, 2501, 2502, 2505, 2506, 2508, 2511,
                   2544, 2547, 2549, 2550, 2553, 2554, 2556, 2559, 2560, 2563, 2565, 2566, 2569, 2570, 2572, 2575, 2608,
                   2611, 2613, 2614, 2617, 2618, 2620, 2623, 2640, 2643, 2645, 2646, 2649, 2650, 2652, 2655, 2656, 2659,
                   2661, 2662, 2665, 2666, 2668, 2671, 2704, 2707, 2709, 2710, 2713, 2714, 2716, 2719, 2720, 2723, 2725,
                   2726, 2729, 2730, 2732, 2735, 2752, 2755, 2757, 2758, 2761, 2762, 2764, 2767, 2800, 2803, 2805, 2806,
                   2809, 2810, 2812, 2815, 3072, 3075, 3077, 3078, 3081, 3082, 3084, 3087, 3120, 3123, 3125, 3126, 3129,
                   3130, 3132, 3135, 3152, 3155, 3157, 3158, 3161, 3162, 3164, 3167, 3168, 3171, 3173, 3174, 3177, 3178,
                   3180, 3183, 3216, 3219, 3221, 3222, 3225, 3226, 3228, 3231, 3232, 3235, 3237, 3238, 3241, 3242, 3244,
                   3247, 3264, 3267, 3269, 3270, 3273, 3274, 3276, 3279, 3312, 3315, 3317, 3318, 3321, 3322, 3324, 3327,
                   3840, 3843, 3845, 3846, 3849, 3850, 3852, 3855, 3888, 3891, 3893, 3894, 3897, 3898, 3900, 3903, 3920,
                   3923, 3925, 3926, 3929, 3930, 3932, 3935, 3936, 3939, 3941, 3942, 3945, 3946, 3948, 3951, 3984, 3987,
                   3989, 3990, 3993, 3994, 3996, 3999, 4000, 4003, 4005, 4006, 4009, 4010, 4012, 4015, 4032, 4035, 4037,
                   4038, 4041, 4042, 4044, 4047, 4080, 4083, 4085, 4086, 4089, 4090, 4092, 4095]

    for t in range(256):
        Lt = np.zeros(4096)
        Ct = np.zeros((4096, 1))
        Ct[t] = 1
        for carry in range(4096):
            if carry & 0xFF == t:
                Lt[carry] = 1

        #Lt = Lt[append_list]
        Ct = Ct[append_list, :]

        if Lt.sum() == 0:
            continue
        if Ct.sum() == 0:
            continue
        L.append(Lt)
        C.append(Ct)

    L = np.array(L)
    C = np.array(C)
    np.save('L_matrix.npy', L)
    np.save('C_matrix.npy', C)

    return L, C

def vector_exapansion(vec):
    a = np.zeros((4096, 1))
    append_list = [0, 3, 5, 6, 9, 10, 12, 15, 48, 51, 53, 54, 57, 58, 60, 63, 80, 83, 85, 86, 89, 90, 92, 95, 96, 99,
                   101, 102, 105, 106, 108, 111, 144, 147, 149, 150, 153, 154, 156, 159, 160, 163, 165, 166, 169, 170,
                   172, 175, 192, 195, 197, 198, 201, 202, 204, 207, 240, 243, 245, 246, 249, 250, 252, 255, 768, 771,
                   773, 774, 777, 778, 780, 783, 816, 819, 821, 822, 825, 826, 828, 831, 848, 851, 853, 854, 857, 858,
                   860, 863, 864, 867, 869, 870, 873, 874, 876, 879, 912, 915, 917, 918, 921, 922, 924, 927, 928, 931,
                   933, 934, 937, 938, 940, 943, 960, 963, 965, 966, 969, 970, 972, 975, 1008, 1011, 1013, 1014, 1017,
                   1018, 1020, 1023, 1280, 1283, 1285, 1286, 1289, 1290, 1292, 1295, 1328, 1331, 1333, 1334, 1337, 1338,
                   1340, 1343, 1360, 1363, 1365, 1366, 1369, 1370, 1372, 1375, 1376, 1379, 1381, 1382, 1385, 1386, 1388,
                   1391, 1424, 1427, 1429, 1430, 1433, 1434, 1436, 1439, 1440, 1443, 1445, 1446, 1449, 1450, 1452, 1455,
                   1472, 1475, 1477, 1478, 1481, 1482, 1484, 1487, 1520, 1523, 1525, 1526, 1529, 1530, 1532, 1535, 1536,
                   1539, 1541, 1542, 1545, 1546, 1548, 1551, 1584, 1587, 1589, 1590, 1593, 1594, 1596, 1599, 1616, 1619,
                   1621, 1622, 1625, 1626, 1628, 1631, 1632, 1635, 1637, 1638, 1641, 1642, 1644, 1647, 1680, 1683, 1685,
                   1686, 1689, 1690, 1692, 1695, 1696, 1699, 1701, 1702, 1705, 1706, 1708, 1711, 1728, 1731, 1733, 1734,
                   1737, 1738, 1740, 1743, 1776, 1779, 1781, 1782, 1785, 1786, 1788, 1791, 2304, 2307, 2309, 2310, 2313,
                   2314, 2316, 2319, 2352, 2355, 2357, 2358, 2361, 2362, 2364, 2367, 2384, 2387, 2389, 2390, 2393, 2394,
                   2396, 2399, 2400, 2403, 2405, 2406, 2409, 2410, 2412, 2415, 2448, 2451, 2453, 2454, 2457, 2458, 2460,
                   2463, 2464, 2467, 2469, 2470, 2473, 2474, 2476, 2479, 2496, 2499, 2501, 2502, 2505, 2506, 2508, 2511,
                   2544, 2547, 2549, 2550, 2553, 2554, 2556, 2559, 2560, 2563, 2565, 2566, 2569, 2570, 2572, 2575, 2608,
                   2611, 2613, 2614, 2617, 2618, 2620, 2623, 2640, 2643, 2645, 2646, 2649, 2650, 2652, 2655, 2656, 2659,
                   2661, 2662, 2665, 2666, 2668, 2671, 2704, 2707, 2709, 2710, 2713, 2714, 2716, 2719, 2720, 2723, 2725,
                   2726, 2729, 2730, 2732, 2735, 2752, 2755, 2757, 2758, 2761, 2762, 2764, 2767, 2800, 2803, 2805, 2806,
                   2809, 2810, 2812, 2815, 3072, 3075, 3077, 3078, 3081, 3082, 3084, 3087, 3120, 3123, 3125, 3126, 3129,
                   3130, 3132, 3135, 3152, 3155, 3157, 3158, 3161, 3162, 3164, 3167, 3168, 3171, 3173, 3174, 3177, 3178,
                   3180, 3183, 3216, 3219, 3221, 3222, 3225, 3226, 3228, 3231, 3232, 3235, 3237, 3238, 3241, 3242, 3244,
                   3247, 3264, 3267, 3269, 3270, 3273, 3274, 3276, 3279, 3312, 3315, 3317, 3318, 3321, 3322, 3324, 3327,
                   3840, 3843, 3845, 3846, 3849, 3850, 3852, 3855, 3888, 3891, 3893, 3894, 3897, 3898, 3900, 3903, 3920,
                   3923, 3925, 3926, 3929, 3930, 3932, 3935, 3936, 3939, 3941, 3942, 3945, 3946, 3948, 3951, 3984, 3987,
                   3989, 3990, 3993, 3994, 3996, 3999, 4000, 4003, 4005, 4006, 4009, 4010, 4012, 4015, 4032, 4035, 4037,
                   4038, 4041, 4042, 4044, 4047, 4080, 4083, 4085, 4086, 4089, 4090, 4092, 4095]
    cnt = 0
    for i in range(4096):
        if i in append_list:
            a[i] = vec[cnt]
            cnt += 1
    return a

def vector_compression(vec):
    append_list = [0, 3, 5, 6, 9, 10, 12, 15, 48, 51, 53, 54, 57, 58, 60, 63, 80, 83, 85, 86, 89, 90, 92, 95, 96, 99,
                   101, 102, 105, 106, 108, 111, 144, 147, 149, 150, 153, 154, 156, 159, 160, 163, 165, 166, 169, 170,
                   172, 175, 192, 195, 197, 198, 201, 202, 204, 207, 240, 243, 245, 246, 249, 250, 252, 255, 768, 771,
                   773, 774, 777, 778, 780, 783, 816, 819, 821, 822, 825, 826, 828, 831, 848, 851, 853, 854, 857, 858,
                   860, 863, 864, 867, 869, 870, 873, 874, 876, 879, 912, 915, 917, 918, 921, 922, 924, 927, 928, 931,
                   933, 934, 937, 938, 940, 943, 960, 963, 965, 966, 969, 970, 972, 975, 1008, 1011, 1013, 1014, 1017,
                   1018, 1020, 1023, 1280, 1283, 1285, 1286, 1289, 1290, 1292, 1295, 1328, 1331, 1333, 1334, 1337, 1338,
                   1340, 1343, 1360, 1363, 1365, 1366, 1369, 1370, 1372, 1375, 1376, 1379, 1381, 1382, 1385, 1386, 1388,
                   1391, 1424, 1427, 1429, 1430, 1433, 1434, 1436, 1439, 1440, 1443, 1445, 1446, 1449, 1450, 1452, 1455,
                   1472, 1475, 1477, 1478, 1481, 1482, 1484, 1487, 1520, 1523, 1525, 1526, 1529, 1530, 1532, 1535, 1536,
                   1539, 1541, 1542, 1545, 1546, 1548, 1551, 1584, 1587, 1589, 1590, 1593, 1594, 1596, 1599, 1616, 1619,
                   1621, 1622, 1625, 1626, 1628, 1631, 1632, 1635, 1637, 1638, 1641, 1642, 1644, 1647, 1680, 1683, 1685,
                   1686, 1689, 1690, 1692, 1695, 1696, 1699, 1701, 1702, 1705, 1706, 1708, 1711, 1728, 1731, 1733, 1734,
                   1737, 1738, 1740, 1743, 1776, 1779, 1781, 1782, 1785, 1786, 1788, 1791, 2304, 2307, 2309, 2310, 2313,
                   2314, 2316, 2319, 2352, 2355, 2357, 2358, 2361, 2362, 2364, 2367, 2384, 2387, 2389, 2390, 2393, 2394,
                   2396, 2399, 2400, 2403, 2405, 2406, 2409, 2410, 2412, 2415, 2448, 2451, 2453, 2454, 2457, 2458, 2460,
                   2463, 2464, 2467, 2469, 2470, 2473, 2474, 2476, 2479, 2496, 2499, 2501, 2502, 2505, 2506, 2508, 2511,
                   2544, 2547, 2549, 2550, 2553, 2554, 2556, 2559, 2560, 2563, 2565, 2566, 2569, 2570, 2572, 2575, 2608,
                   2611, 2613, 2614, 2617, 2618, 2620, 2623, 2640, 2643, 2645, 2646, 2649, 2650, 2652, 2655, 2656, 2659,
                   2661, 2662, 2665, 2666, 2668, 2671, 2704, 2707, 2709, 2710, 2713, 2714, 2716, 2719, 2720, 2723, 2725,
                   2726, 2729, 2730, 2732, 2735, 2752, 2755, 2757, 2758, 2761, 2762, 2764, 2767, 2800, 2803, 2805, 2806,
                   2809, 2810, 2812, 2815, 3072, 3075, 3077, 3078, 3081, 3082, 3084, 3087, 3120, 3123, 3125, 3126, 3129,
                   3130, 3132, 3135, 3152, 3155, 3157, 3158, 3161, 3162, 3164, 3167, 3168, 3171, 3173, 3174, 3177, 3178,
                   3180, 3183, 3216, 3219, 3221, 3222, 3225, 3226, 3228, 3231, 3232, 3235, 3237, 3238, 3241, 3242, 3244,
                   3247, 3264, 3267, 3269, 3270, 3273, 3274, 3276, 3279, 3312, 3315, 3317, 3318, 3321, 3322, 3324, 3327,
                   3840, 3843, 3845, 3846, 3849, 3850, 3852, 3855, 3888, 3891, 3893, 3894, 3897, 3898, 3900, 3903, 3920,
                   3923, 3925, 3926, 3929, 3930, 3932, 3935, 3936, 3939, 3941, 3942, 3945, 3946, 3948, 3951, 3984, 3987,
                   3989, 3990, 3993, 3994, 3996, 3999, 4000, 4003, 4005, 4006, 4009, 4010, 4012, 4015, 4032, 4035, 4037,
                   4038, 4041, 4042, 4044, 4047, 4080, 4083, 4085, 4086, 4089, 4090, 4092, 4095]
    vec = vec[append_list, :]
    return vec

# Calculate the 4-branch BCP
def four_bcp_calculate(del0, del1, del2, del3, nav0, nav1, nav2, nav3, alpha, beta, bit_num):
    B = np.load('four_bcp_matrix.npy')
    B = B / 128
    R = np.load('rotation_matrix.npy')
    L = np.load('L_matrix.npy')
    C = np.load('C_matrix.npy')

    sum = 0
    del3 = rot_left(rot_left(del3, beta, bit_num), alpha, bit_num)
    del2 = rot_left(rot_left(del2, beta, bit_num), alpha, bit_num)
    nav3 = rot_left(rot_left(nav3, beta, bit_num), alpha, bit_num)
    nav2 = rot_left(rot_left(nav2, beta, bit_num), alpha, bit_num)
    del1 = rot_left(del1, alpha, bit_num)
    nav1 = rot_left(nav1, alpha, bit_num)

    for j in range(64):
        del0_ = del0
        del1_ = del1
        del2_ = del2
        del3_ = del3
        nav0_ = nav0
        nav1_ = nav1
        nav2_ = nav2
        nav3_ = nav3

        Lt = L[j]
        Ct = C[j]

        mask = 0x1

        ans = Ct
        for i in range(bit_num - 1):
            t = (((del0_ & mask) << 7) | ((del1_ & mask) << 6) | ((del2_ & mask) << 5) | ((del3_ & mask) << 4) |
                 ((nav0_ & mask) << 3) | ((nav1_ & mask) << 2) | ((nav2_ & mask) << 1) | ((nav3_ & mask) << 0))
            del0_ >>= 1
            del1_ >>= 1
            del2_ >>= 1
            del3_ >>= 1

            nav0_ >>= 1
            nav1_ >>= 1
            nav2_ >>= 1
            nav3_ >>= 1

            if i == (alpha - 1):
                ans = vector_exapansion(ans)
                B_r0 = np.load('four_bcp_last_matrix' + str(t) + '.npy')
                B_r0 = B_r0 / 128
                ans = B_r0 @ ans
                ans = R[0] @ ans
                ans = vector_compression(ans)
                continue
            if i == ((beta + alpha - 1) % bit_num):
                ans = vector_exapansion(ans)
                B_r1 = np.load('four_bcp_last_matrix' + str(t) + '.npy')
                B_r1 = B_r1 / 128
                ans = B_r1 @ ans
                ans = R[1] @ ans
                ans = vector_compression(ans)
                continue

            ans = B[t] @ ans

        t = (((del0_ & mask) << 7) | ((del1_ & mask) << 6) | ((del2_ & mask) << 5) | ((del3_ & mask) << 4) |
             ((nav0_ & mask) << 3) | ((nav1_ & mask) << 2) | ((nav2_ & mask) << 1) | ((nav3_ & mask) << 0))
        last_B = np.load('four_bcp_last_matrix' + str(t) +'.npy')
        last_B = last_B / 128
        ans = vector_exapansion(ans)
        ans = last_B @ ans

        ans = Lt @ ans
        ans = ans.sum()
        sum += ans
    return sum

